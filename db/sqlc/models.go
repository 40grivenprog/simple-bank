// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type CreditRequestsStatus string

const (
	CreditRequestsStatusApproved  CreditRequestsStatus = "approved"
	CreditRequestsStatusPending   CreditRequestsStatus = "pending"
	CreditRequestsStatusCancelled CreditRequestsStatus = "cancelled"
)

func (e *CreditRequestsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CreditRequestsStatus(s)
	case string:
		*e = CreditRequestsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CreditRequestsStatus: %T", src)
	}
	return nil
}

type NullCreditRequestsStatus struct {
	CreditRequestsStatus CreditRequestsStatus `json:"credit_requests_status"`
	Valid                bool                 `json:"valid"` // Valid is true if CreditRequestsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCreditRequestsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CreditRequestsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CreditRequestsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCreditRequestsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CreditRequestsStatus), nil
}

type UserRole string

const (
	UserRoleBase  UserRole = "base"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Account struct {
	ID        int64     `json:"id"`
	Owner     string    `json:"owner"`
	Balance   int64     `json:"balance"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
}

type CreditRequest struct {
	ID        int64                `json:"id"`
	Status    CreditRequestsStatus `json:"status"`
	Amount    int32                `json:"amount"`
	Reason    sql.NullString       `json:"reason"`
	Username  string               `json:"username"`
	Currency  string               `json:"currency"`
	CreatedAt time.Time            `json:"created_at"`
}

type Entry struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	// can be negative or positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type Transfer struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	// must be positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
	IsEmailVerified   bool      `json:"is_email_verified"`
	Role              UserRole  `json:"role"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}
